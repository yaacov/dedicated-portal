#
# Copyright (c) 2018 Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# This file contains an OpenShift template that creates all the objects needed
# for a working installation of the application. See the `template.sh` file for
# an example of how to use it.

---

apiVersion: v1
kind: Template
metadata:
  name: unified-hybrid-cloud
  annotations:
    description: "Unified Hybrid Cloud"
parameters:

- name: NAMESPACE
  description: The namespace where the objects will be created.
  value: unified-hybrid-cloud

- name: VERSION
  description: The version number of the project.
  value: latest

- name: DOMAIN
  description: The DNS domain where the routes will be created.
  value: example.com

- name: PASSWORD
  description: Password for the database user.

- name: DEMO_MODE
  description: If set to true, services will run without authentication.
  value: "false"

- name: PG_DATADIR
  description: The postgresql data dir.
  value: "/var/lib/pgsql/data"

- name: SSH_PRIVATE_KEY
  description: the default ssh private key to use by cluster-service for cluster provisioning.
  value: |-
    LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBcks0blFJK3pl
    NU4wcldhQkErN09YTWczSlhWWUlqVDA0cUV5WWtNQ3FtZHJNOGdMClFiUjJVRU14d1hzVzRua2ll
    RnpYNUlCMmVRYXIwWDJnL2ZGUFdwMWRsejd0dVFhcXNnSllsVVFwS3NJUkxrdXQKMGJoQ3haZlZD
    TUs5S3BlanNMNkU4dDNYZDBkYXpSUWFxQVlraEZxWkNQbHpGbmZJK2ZHeWVlTFl2akFBNE4xaApN
    aExuZmRJbzFFVGRRb1lueG1IZVR1ZHZVcDJGL3BqUGhkR05JTjZJR2g4Z05TelFxZlhwdVJ6TVhD
    K3JYaFFvCmkyS0dFdGRYc0orRlFHUHJaTXJuVzVHTGQ2Ri9Ydk9uOUoyZGQrY1hnWk5oVUlyWm5O
    ZzNmbERpcno2UElseXgKN2F3bXlKU2NEcTJXcTNxcWt1eitLN3A0Nkh5VGdyOVJGNkVGbHdJREFR
    QUJBb0lCQUdaN2lVSXd4dFd0Z3M2eQppaGs2Ym5EMFJuNU5zVHZEOEI1Y2l0bDBhYTJXYVRJM0pD
    OGZtaVF5Yk9JbVdrT1ludE9PVG5jSG9zaGJKRGZWCmRtbWdBSGVIODVhaXUxVlhWcEVGQVd1OUl5
    MkVOY3dqRUFycWIzNXppUFNGRnQyalYzdTY1bzU1Q0xwNnQ3SUUKbjNsZkErY2xHYlFRejdQaTdY
    MGhhOG9Zem9lNFhncm55UkFFa293bk5aTlpQRFJaWUpMM2oycUIyOFRXT3JkRwpZN2JYZ3BjUXVn
    cTlpOHRLNDVQbUp3eEdDMnhmT0VIR3lqd0lQK1J4S2JLaDMxd0ZvTjZ2SjBTblJ4cHkvS0NWCmxX
    VzY2UUpzejVoY3FEdUxrby96TFJ5eGx1L0oxZjZvVEc5eGhGeGxYcUExaDVCa3poLzF4ZHFob3Nm
    aklBUXgKODcwZkVUa0NnWUVBMDV0LzMxWTdBQm5NQ1IweUlWbldsOWkvYnh3UURkMTNjY0tmYTdC
    eGE4d3dINDNIWlpnQwpaVnBCemxoek5WUmczTWw0OEhHbGpDZEtYWFZDZnZncllsUVl1SG5pbFBE
    ZXJQQTFVNFQyRTNXWTcycUpkSzE4CkJHR3ZYaWQ2MFplcXRwYUVtbTYzcktmNm5PTTBnNjRNeDRW
    bnNxQ0tJdDYzL2pncHJkdmpxYlVDZ1lFQTBPZ00KbjVweTQ0L1k2SmEwZkRuWHFNQ3NWbVhaUVRP
    OUZRaXdHNmZjV0pua3hnYmFWY3Rzd2h0enhSMEltMjVWMG9RMQo4QjkyRUc2V2ZMNkQvdDEydUor
    WUJVeUVHT0QxTGRTaW9qWWo5UDZNV3MxQzdxU2dMYm9TYms1ejhvZTd1RkdECm1hM3pFNUE1ZGdW
    RHNuUnlKN1dZUTkrTGVNekdWMVdrWnE0YlVac0NnWUVBdTlPL0FVTE5SQjJoMmtVc0JpWjAKTUh5
    WUQ4dmRCREdjb0VHY3VEMzVyekdqVlo3SGF3b3V0a0FUUVZHSmtjQy82YnA3dXhGbFhLNVRkL2xw
    ZU1KWAo0QU85bmFHeTJYbWtiZVVac0hUSTZDVHVCeldOcFIrSWdXc2orbk1ZdFlubVlnUGcyQ09H
    clo2OCtSMURzODUrClVXdTh5L1ZzSjkrQmVnbm9GUWFsWWpFQ2dZQUZIMXVINGxxazE5Y2l4T2RD
    RUkwSU4wbENpUmJOc1g0V2NQTVkKaW9JdHJnQmRGcmZ0MktJZkZGcy9YeG5oN2MrdTdNMEJ5Vk8w
    elhGbE42cTI2aWxLRjZlN29ZZXZzSHh5bGo4eQpxUTh5cDdjN1ZzTW9aT01FbkFadHJBRE4xcVEw
    dmRMelJyK3FJQ1E0ajZKOFVyeWwycDhVTXZ3Umh6dnAwbERJCnI4WTl0d0tCZ0RSc1Iyb3Q2UHpu
    Qm8zc3NOWXU2WElVVVFEc2R4a0lkdFFiMDBzMnJUeXBMdDN0OHdYYlRUQ3UKd29ZY2dJckx2dVRU
    dlVyc09jYU0zWVM2V3Y3TENlbmh3RmEvdW13eWlvMzJCTUpkbWxXWlpsMTdRWkVZNlp2eQprekxP
    UGR6NE91Wi9HSGdNTm1QOHZ4Qm9yT0JNazZtVlBvWW1LNzNMd1VpdkVYa1o4MHdECi0tLS0tRU5E
    IFJTQSBQUklWQVRFIEtFWS0tLS0tCg==

- name: SSH_PUBLIC_KEY
  description: the default ssh public key to use by cluster-service for cluster provisioning.
  value: |-
    c3NoLXJzYSBBQUFBQjNOemFDMXljMkVBQUFBREFRQUJBQUFCQVFDc3JpZEFqN043azNTdFpvRUQ3
    czVjeURjbGRWZ2lOUFRpb1RKaVF3S3FaMnN6eUF0QnRIWlFRekhCZXhiaWVTSjRYTmZrZ0haNUJx
    dlJmYUQ5OFU5YW5WMlhQdTI1QnFxeUFsaVZSQ2txd2hFdVM2M1J1RUxGbDlVSXdyMHFsNk93dm9U
    eTNkZDNSMXJORkJxb0JpU0VXcGtJK1hNV2Q4ajU4Yko1NHRpK01BRGczV0V5RXVkOTBpalVSTjFD
    aGlmR1lkNU81MjlTbllYK21NK0YwWTBnM29nYUh5QTFMTkNwOWVtNUhNeGNMNnRlRkNpTFlvWVMx
    MWV3bjRWQVkrdGt5dWRia1l0M29YOWU4NmYwbloxMzV4ZUJrMkZRaXRtYzJEZCtVT0t2UG84aVhM
    SHRyQ2JJbEp3T3JaYXJlcXFTN1A0cnVuam9mSk9DdjFFWG9RV1gK

- name: AWS_ACCESS_KEY_ID
  description: the default aws access key id to use by cluster-service for cluster provisioning.
  value: ""

- name: AWS_SECRET_ACCESS_KEY
  description: the default aws secret access key to use by cluster-service for cluster provisioning.
  value: ""

- name: DEFAULT_CLUSTER_TLS_CERTIFICATE
  description: the default certificate used by customers to connect to the newly provisioned cluster.
  value: ""

- name: DEFAULT_CLUSTER_TLS_KEY
  description: the default key used by customers to connect to the newly provisioned cluster.
  value: ""

objects:

# Cluster service
# ---------------

# Deployment
- apiVersion: apps/v1beta1
  kind: Deployment
  metadata:
    name: clusters-service
    labels:
      app: clusters-service
  spec:
    selector:
      matchLabels:
        app: clusters-service
    replicas: 1
    template:
      metadata:
        labels:
          app: clusters-service
      spec:
        volumes:
          - name: https-clusters-secret
            secret:
              secretName: https-clusters-secret
        containers:
        - name: service
          image: unified-hybrid-cloud/clusters-service:${VERSION}
          imagePullPolicy: IfNotPresent
          command:
          - /usr/local/bin/clusters-service
          args:
          - serve
          - --demo-mode=${DEMO_MODE}
          - --db-url=postgres://service:${PASSWORD}@clusters-db-service.${NAMESPACE}/clusters
          - --jwk-certs-url=https://developers.redhat.com/auth/realms/rhd/protocol/openid-connect/certs
          - --https-cert-path=/secrets/tls.crt
          - --https-key-path=/secrets/tls.key
          - --default-aws-secret=default-aws-secret
          - --default-ssh-secret=default-ssh-secret
          volumeMounts:
          - name: https-clusters-secret
            mountPath: "/secrets"

# Default SSH Secret
- apiVersion: v1
  kind: Secret
  metadata:
    name: default-ssh-secret
  type: Opaque
  data:
    ssh-privatekey: ${SSH_PRIVATE_KEY}
    ssh-publickey: ${SSH_PUBLIC_KEY}

# Default AWS secret
- apiVersion: v1
  kind: Secret
  metadata:
    name: default-aws-secret
  type: Opaque
  data:
    awsAccessKeyId: ${AWS_ACCESS_KEY_ID}
    awsSecretAccessKey: ${AWS_SECRET_ACCESS_KEY}

# Default Cluster TLS secret
- apiVersion: v1
  kind: Secret
  metadata:
    name: default-cluster-tls-certs
  type: Opaque
  data:
    server.crt: ${DEFAULT_CLUSTER_TLS_CERTIFICATE}
    server.key: ${DEFAULT_CLUSTER_TLS_KEY}

# Service
- apiVersion: v1
  kind: Service
  metadata:
    name: clusters-service
    labels:
      app: clusters-service
    annotations:
      "service.alpha.openshift.io/serving-cert-secret-name": https-clusters-secret
  spec:
    selector:
      app: clusters-service
    ports:
    - port: 8000
      targetPort: 8000
# Route
- apiVersion: v1
  kind: Route
  metadata:
    name: clusters-service
  spec:
    host: clusters-service.${DOMAIN}
    to:
      kind: Service
      name: clusters-service
    tls:
      termination: passthrough

# Customers service
# -----------------

# Deployment
- apiVersion: apps/v1beta1
  kind: Deployment
  metadata:
    name: customers-service
    labels:
      app: customers-service
  spec:
    selector:
      matchLabels:
        app: customers-service
    replicas: 1
    template:
      metadata:
        labels:
          app: customers-service
      spec:
        volumes:
        - name: https-customers-secret
          secret:
            secretName: https-customers-secret
        containers:
        - name: service
          image: unified-hybrid-cloud/customers-service:${VERSION}
          imagePullPolicy: IfNotPresent
          command:
          - /usr/local/bin/customers-service
          args:
          - serve
          - --demo-mode=${DEMO_MODE}
          - --db-url=postgres://service:${PASSWORD}@customers-db-service.${NAMESPACE}/customers
          - --jwk-certs-url=https://developers.redhat.com/auth/realms/rhd/protocol/openid-connect/certs
          - --https-cert-path=/secrets/tls.crt
          - --https-key-path=/secrets/tls.key
          volumeMounts:
          - name: https-customers-secret
            mountPath: "/secrets"
# Service
- apiVersion: v1
  kind: Service
  metadata:
    name: customers-service
    labels:
      app: customers-service
    annotations:
      "service.alpha.openshift.io/serving-cert-secret-name": https-customers-secret
  spec:
    selector:
      app: customers-service
    ports:
    - port: 8000
      targetPort: 8000
# Route
- apiVersion: v1
  kind: Route
  metadata:
    name: customers-service
  spec:
    host: customers-service.${DOMAIN}
    to:
      kind: Service
      name: customers-service
    tls:
      termination: passthrough

# Customers DB
# ------------

# Deployment
- apiVersion: apps/v1beta1
  kind: Deployment
  metadata:
    name: customers-db-service
    labels:
      app: customers-db-service
  spec:
    selector:
      matchLabels:
        app: customers-db-service
    replicas: 1
    template:
      metadata:
        labels:
          app: customers-db-service
      spec:
        initContainers:
        - name: install-ssl
          image: busybox
          command: ['install', '-m', '0600', '/secrets/tls.crt', '/secrets/tls.key', '${PG_DATADIR}']
          volumeMounts:
          - mountPath: ${PG_DATADIR}
            name: data
          - name: https-customers-db-secret
            mountPath: "/secrets"
        containers:
        - name: postgresql
          image: centos/postgresql-94-centos7
          imagePullPolicy: IfNotPresent
          env:
          - name: POSTGRESQL_DATABASE
            value: customers
          - name: POSTGRESQL_USER
            value: service
          - name: POSTGRESQL_PASSWORD
            value: ${PASSWORD}
          ports:
          - containerPort: 5432
            protocol: TCP
          volumeMounts:
          - mountPath: ${PG_DATADIR}
            name: data
          - name: https-customers-db-secret
            mountPath: "/secrets"
          - name: ssl-config-volume
            mountPath: /opt/app-root/src/postgresql-cfg
        volumes:
        - name: https-customers-db-secret
          secret:
            secretName: https-customers-db-secret
        - name: ssl-config-volume
          configMap:
            name: ssl-config-volume
        - name: data
          emptyDir: {}
# Service
- apiVersion: v1
  kind: Service
  metadata:
    name: customers-db-service
    labels:
      app: customers-db-service
    annotations:
      "service.alpha.openshift.io/serving-cert-secret-name": https-customers-db-secret
  spec:
    selector:
      app: customers-db-service
    ports:
    - port: 5432
      targetPort: 5432

# Clusters DB
# ------------

# Deployment
- apiVersion: apps/v1beta1
  kind: Deployment
  metadata:
    name: clusters-db-service
    labels:
      app: clusters-db-service
  spec:
    selector:
      matchLabels:
        app: clusters-db-service
    replicas: 1
    template:
      metadata:
        labels:
          app: clusters-db-service
      spec:
        initContainers:
        - name: install-ssl
          image: busybox
          command: ['install', '-m', '0600', '/secrets/tls.crt', '/secrets/tls.key', '${PG_DATADIR}']
          volumeMounts:
          - mountPath: ${PG_DATADIR}
            name: data
          - name: https-clusters-db-secret
            mountPath: "/secrets"
        containers:
        - name: postgresql
          image: centos/postgresql-94-centos7
          imagePullPolicy: IfNotPresent
          env:
          - name: POSTGRESQL_DATABASE
            value: clusters
          - name: POSTGRESQL_USER
            value: service
          - name: POSTGRESQL_PASSWORD
            value: ${PASSWORD}
          ports:
          - containerPort: 5432
            protocol: TCP
          volumeMounts:
          - mountPath: ${PG_DATADIR}
            name: data
          - name: https-clusters-db-secret
            mountPath: "/secrets"
          - name: ssl-config-volume
            mountPath: /opt/app-root/src/postgresql-cfg
        volumes:
        - name: https-clusters-db-secret
          secret:
            secretName: https-clusters-db-secret
        - name: ssl-config-volume
          configMap:
            name: ssl-config-volume
        - name: data
          emptyDir: {}
# Service
- apiVersion: v1
  kind: Service
  metadata:
    name: clusters-db-service
    labels:
      app: clusters-db-service
    annotations:
      "service.alpha.openshift.io/serving-cert-secret-name": https-clusters-db-secret
  spec:
    selector:
      app: clusters-db-service
    ports:
    - port: 5432
      targetPort: 5432
# ConfigMap
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: ssl-config-volume
  data:
    pg-ssl.conf: |-
      ssl = on
      ssl_cert_file = '${PG_DATADIR}/tls.crt'
      ssl_key_file = '${PG_DATADIR}/tls.key'
# ClusterRole
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    name: cluster-operator-client
  rules:
  - apiGroups:
    - clusteroperator.openshift.io
    resources:
    - clusterdeployments
    - clusterversions
    verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - cluster.k8s.io
    resources:
    - clusters
    verbs:
    - get
    - list
    - watch
#ClusterRoleBinding
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    name: uhc-cluster-operator-client
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: cluster-operator-client
  subjects:
  - apiGroup: ""
    kind: ServiceAccount
    name: uhc
    namespace: unified-hybrid-cloud
